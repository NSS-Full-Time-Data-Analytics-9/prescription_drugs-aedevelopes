-- 1. 
--     a. Which prescriber had the highest total number of claims (totaled over all drugs)? Report the npi and the total number of claims.
    select npi, sum(total_claim_count)
	from prescriber as p1
	left join prescription as p
	using(npi)
	group by npi
	order by sum(total_claim_count) desc nulls last
	limit 1


	
--     b. Repeat the above, but this time report the nppes_provider_first_name, nppes_provider_last_org_name,  
-- 		specialty_description, and the total number of claims.
		select sum(total_claim_count), nppes_provider_first_name as first, nppes_provider_last_org_name as last, specialty_description as practice
		from prescriber as p1
		left join prescription as p
		using(npi)
		group by npi, nppes_provider_first_name, nppes_provider_last_org_name, specialty_description
		order by sum(total_claim_count) desc nulls last
	--bruce pendley family practice

-- 2. 
--     a. Which specialty had the most total number of claims (totaled over all drugs)?
		select specialty_description, sum(p1.total_claim_count)
		from prescriber as p
		full join prescription as p1
		using(npi)
		group by specialty_description
		order by sum(p1.total_claim_count) desc nulls last
		limit 1
	--family 9752347
		
		
--     b. Which specialty had the most total number of claims for opioids?
		select p.specialty_description, sum(total_claim_count) as sum
		from prescriber as p
		full join prescription as p1
		using(npi)
		full join drug as d
		using(drug_name)
		where d.opioid_drug_flag = 'Y'
		group by p.specialty_description
		order by sum desc nulls last
		limit 1
	--NP 900,845


--     c. **Challenge Question:** Are there any specialties that appear in the prescriber table that have no associated prescriptions in the prescription table?
		(SELECT specialty_description
		FROM prescriber
		GROUP BY specialty_description)	
	EXCEPT
		(SELECT specialty_description
		FROM prescriber
		INNER JOIN prescription
		USING(npi)
		GROUP BY specialty_description)
		
		
--     d. **Difficult Bonus:** *Do not attempt until you have solved all other problems!* For each specialty, report the percentage of total claims by that specialty which are for opioids.
--		Which specialties have a high percentage of opioids?

-- 3. 
--     a. Which drug (generic_name) had the highest total drug cost?
		select sum(p.total_drug_cost), d.generic_name
		from prescription as p
		full join drug as d
		using(drug_name)
		group by generic_name
		order by sum(p.total_drug_cost) desc nulls last
		limit 1
	--insulin 1bil
	
-- 		select p.total_drug_cost, d.generic_name
-- 		from prescription as p
-- 		full join drug as d
-- 		using(drug_name)
-- 		--group by generic_name, p.total_drug_cost
-- 		order by p.total_drug_cost desc nulls last
-- 		limit 1
	--pirfenidone 2,829,174.30
	

--     b. Which drug (generic_name) has the hightest total cost per day? **Bonus: Round your cost per day column to 2 decimal places. Google ROUND to see how this works.**
		select generic_name,sum(total_drug_cost)/sum(total_day_supply) as cpu
		from prescription as p
		full join drug as d
		using(drug_name)
		group by generic_name
		order by cpu desc nulls last
	--esterase inhibitor 3495 cpu
		select *
		from prescription
		
-- 4. 
--     a. For each drug in the drug table, return the drug name and then a column named 'drug_type' which says 'opioid' for drugs which have opioid_drug_flag = 'Y', 
--			says 'antibiotic' for those drugs which have antibiotic_drug_flag = 'Y', and says 'neither' for all other drugs.
		SELECT drug_name,
				CASE WHEN opioid_drug_flag ilike 'Y' THEN 'Opioid'
				WHEN antibiotic_drug_flag ilike 'Y' THEN 'Antibiotic'
				when antibiotic_drug_flag ilike 'N' THEN 'Neither'
				ELSE 'MISSING' END as drug_type
				
		FROM drug
--     b. Building off of the query you wrote for part a, determine whether more was spent (total_drug_cost) on opioids or on antibiotics. Hint: Format the total 
--			costs as MONEY for easier comparision.
		SELECT sum(total_drug_cost::money) as total_cost,
				CASE WHEN opioid_drug_flag ilike 'Y' THEN 'opioid'
				WHEN antibiotic_drug_flag ilike 'Y' THEN 'antibiotic'
				when antibiotic_drug_flag ilike 'N' THEN 'neither'
				ELSE 'MISSING' END as drug_type
		FROM drug as d
		FULL JOIN prescription as p
		USING(drug_name)
		group by drug_type
	--opioid 105 mil

-- 5. 
--     a. How many CBSAs are in Tennessee? **Warning:** The cbsa table contains information for all states, not just Tennessee.
		SELECT count(cbsa)
		FROM cbsa
		WHERE cbsaname ilike '%, tn'
		
--     b. Which cbsa has the largest combined population? Which has the smallest? Report the CBSA name and total population.
		(SELECT cbsaname, cbsa, sum(p.population) as totalpop
		FROM population AS p
		RIGHT JOIN cbsa AS c
		USING(fipscounty)
		INNER JOIN zip_fips AS z
		USING(fipscounty)
			WHERE population IS NOT null
		GROUP BY cbsa, cbsaname
		ORDER BY totalpop DESC NULLS LAST
		LIMIT 1)
	UNION
		(SELECT cbsaname, cbsa, sum(p.population) as totalpop
		FROM population AS p
		RIGHT JOIN cbsa AS c
		USING(fipscounty)
		INNER JOIN zip_fips AS z
		USING(fipscounty)
			WHERE population IS NOT null
		GROUP BY cbsa, cbsaname
		ORDER BY totalpop ASC NULLS LAST
		LIMIT 1)
	--memphis 67,870,189
	--Morristown 1,163,520
		
--     c. What is the largest (in terms of population) county which is not included in a CBSA? Report the county name and population.
		(SELECT sum(population) as totalpop, county
		FROM population AS p
		INNER JOIN zip_fips AS z
		 USING(fipscounty)
		FULL JOIN fips_county as f
		 USING(fipscounty)
		group by county)
	EXCEPT
		(SELECT sum(population) as totalpop, county
		FROM population AS p
		RIGHT JOIN cbsa AS c
		 USING(fipscounty)
		INNER JOIN zip_fips AS z
		 USING(fipscounty)
		FULL JOIN fips_county as f
		 USING(fipscounty)
		group by county)
		ORDER BY totalpop DESC NULLS LAST
		LIMIT 1
	--Sevier 1,241,799
		
-- 6. 
--     a. Find all rows in the prescription table where total_claims is at least 3000. Report the drug_name and the total_claim_count.
		SELECT drug_name, total_claim_count
		FROM prescription
		WHERE total_claim_count > 3000
		GROUP BY drug_name, total_claim_count
		
--     b. For each instance that you found in part a, add a column that indicates whether the drug is an opioid.
		SELECT drug_name, total_claim_count, 
			CASE WHEN d.opioid_drug_flag ilike 'Y' THEN 'Opiod'
			ELSE 'Not Opioid' END as is_opioid
		FROM prescription as p
		FULL JOIN drug as d
		USING(drug_name)
		WHERE total_claim_count > 3000
		GROUP BY drug_name, total_claim_count, d.opioid_drug_flag
		
--     c. Add another column to you answer from the previous part which gives the prescriber first and last name associated with each row.
		SELECT drug_name, total_claim_count, nppes_provider_first_name, nppes_provider_last_org_name, 
				CASE WHEN d.opioid_drug_flag ilike 'Y' THEN 'Opiod'
		ELSE 'Not Opioid' END as is_opioid
		FROM prescription as p
		INNER JOIN drug as d
		USING(drug_name)
		INNER JOIN prescriber
		USING(npi)
		WHERE total_claim_count > 3000
		GROUP BY drug_name, total_claim_count, d.opioid_drug_flag,nppes_provider_first_name, nppes_provider_last_org_name
		
-- 7. The goal of this exercise is to generate a full list of all pain management specialists in Nashville and the number of claims they had for each opioid. 
--		**Hint:** The results from all 3 parts will have 637 rows.

--     a. First, create a list of all npi/drug_name combinations for pain management specialists (specialty_description = 'Pain Managment') in the city of
--		Nashville (nppes_provider_city = 'NASHVILLE'), where the drug is an opioid (opiod_drug_flag = 'Y'). **Warning:** Double-check your query before running it. 
--		You will only need to use the prescriber and drug tables since you don't need the claims numbers yet.
		SELECT distinct P1.npi, drug_name
		FROM prescriber as p1
		CROSS JOIN drug as d
		WHERE specialty_description = 'Pain Management' 
		AND nppes_provider_city = 'NASHVILLE'
		AND opioid_drug_flag = 'Y'
	
		
--     b. Next, report the number of claims per drug per prescriber. Be sure to include all combinations, whether or not the prescriber had any claims. You should report the npi, 
--		the drug name, and the number of claims (total_claim_count).
		SELECT p1.npi, p2.drug_name, specialty_description, coalesce(total_claim_count, 0)
		FROM prescriber as p1
		CROSS JOIN drug as d
			FULL JOIN prescription as p2
			USING(npi, drug_name)
		WHERE specialty_description = 'Pain Management' 
		AND nppes_provider_city = 'NASHVILLE'
		AND opioid_drug_flag = 'Y'
		order by total_claim_count desc nulls last
--     c. Finally, if you have not done so already, fill in any missing values for total_claim_count with 0. Hint - Google the COALESCE function.

-- 1. How many npi numbers appear in the prescriber table but not in the prescription table?
		SELECT COUNT(p1.npi)
						-COUNT(p.npi) as num
		FROM prescriber as p1
		FULL JOIN prescription as p
		USING(npi)
-- 2.
--     a. Find the top five drugs (generic_name) prescribed by prescribers with the specialty of Family Practice.
	SELECT generic_name, sum(total_day_supply) AS total
	FROM prescription
	FULL JOIN drug
	USING (drug_name)
	FULL JOIN prescriber
	USING(npi)
	WHERE specialty_description ILIKE 'Family Practice'
	GROUP BY generic_name
	ORDER BY total DESC NULLS LAST
	LIMIT 5

--     b. Find the top five drugs (generic_name) prescribed by prescribers with the specialty of Cardiology.
	SELECT generic_name, sum(total_day_supply) AS total
	FROM prescription
	FULL JOIN drug
	USING (drug_name)
	FULL JOIN prescriber
	USING(npi)
	WHERE specialty_description ILIKE 'CARDIOLOGY'
	GROUP BY generic_name
	ORDER BY total DESC NULLS LAST
	LIMIT 5
--     c. Which drugs are in the top five prescribed by Family Practice prescribers and Cardiologists? Combine what you did for parts a and b into a single query to answer this question.
	(SELECT generic_name, sum(total_day_supply) AS total
	FROM prescription
	FULL JOIN drug
	USING (drug_name)
	FULL JOIN prescriber
	USING(npi)
	WHERE specialty_description ILIKE 'CARDIOLOGY'
	GROUP BY generic_name
	ORDER BY total DESC NULLS LAST

	(SELECT generic_name, sum(total_day_supply) AS total
	FROM prescription
	FULL JOIN drug
	USING (drug_name)
	FULL JOIN prescriber
	USING(npi)
	WHERE specialty_description ILIKE 'Family Practice'
	GROUP BY generic_name
	ORDER BY total DESC NULLS LAST
	LIMIT 5)
-- 3. Your goal in this question is to generate a list of the top prescribers in each of the major metropolitan areas of Tennessee.
--     a. First, write a query that finds the top 5 prescribers in Nashville in terms of the total number of claims (total_claim_count) across all drugs. Report the npi, the total number of claims, and include a column showing the city.
    
--     b. Now, report the same for Memphis.
    
--     c. Combine your results from a and b, along with the results for Knoxville and Chattanooga.

-- 4. Find all counties which had an above-average number of overdose deaths. Report the county name and number of overdose deaths.

-- 5.
--     a. Write a query that finds the total population of Tennessee.
    SELECT sum(population), state
	FROM population as p
	FULL JOIN fips_county
	USING(fipscounty)
	WHERE state ilike 'tn'
	GROUP BY state
--     b. Build off of the query that you wrote in part a to write a query that returns for each county that county's name, its population, and the percentage of the total population of Tennessee that is contained in that county.
    SELECT (population/sum(population)), state, county
	FROM population as p
	FULL JOIN fips_county
	USING(fipscounty)
	WHERE state ilike 'tn'
	GROUP BY county
